#+TITLE: Starter Kit Python
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

* Starter kit Python

Support for the Python programming language.

** Check Dependencies

Determine whether required packages are installed. If not, use ELPA to
install them.
#+begin_src emacs-lisp
  (dolist (package '(python-mode ipython))
    (unless (package-installed-p package)
      (package-install package)))
#+end_src

** Use Python's python-mode.el instead of Emacs' python.el
   :PROPERTIES:
   :CUSTOM_ID: python
   :END:
Replace the Python mode that comes with Emacs by the Python mode
supplied by the Python distribution itself.
#+begin_src emacs-lisp
    
  (require 'python)
    
  (setq
   comint-process-echoes t
   python-shell-interpreter "ipython"
   python-shell-interpreter-args "--no-banner --classic --no-confirm-exit"
   python-shell-prompt-regexp "In \\[[0-9]+\\]: "
   python-shell-prompt-output-regexp "Out\\[[0-9]+\\]: "
   python-shell-completion-setup-code
     "from IPython.core.completerlib import module_completion"
   python-shell-completion-module-string-code
   "';'.join(module_completion('''%s'''))\n"
   python-shell-completion-string-code
     "';'.join(get_ipython().Completer.all_completions('''%s'''))\n"
   org-babel-python-command python-shell-interpreter python-shell-interpreter-args)
    
  (defun my-start-python ()
    (interactive)
    (delete-other-windows)
    (setq w1 (selected-window))
    (setq w1name (buffer-name))
    (setq w2 (split-window w1 nil t))
    (if (not (member "*Python*" (mapcar (function buffer-name) (buffer-list))))
        (run-python python-shell-interpreter python-shell-interpreter-args))
    (set-window-buffer w2 "*Python*")
    (set-window-buffer w1 w1name))
  
  (defun my-python-eval (&optional beg end)
    (interactive)
    (my-start-python)
    (let ((beg (cond (beg beg)
                     ((region-active-p)
                      (region-beginning))
                     (t (line-beginning-position))))
          (end (cond (end end)
                     ((region-active-p)
                      (copy-marker (region-end)))
                     (t (line-end-position)))))
      (python-shell-send-region beg end))
  )
  
  (add-hook 'python-mode-hook
            '(lambda()
               (local-set-key [(shift return)] 'my-python-eval)))
  
#+end_src

** Use Cython mode
   :PROPERTIES:
   :CUSTOM_ID: cython
   :END:
#+begin_src emacs-lisp
  (when (require 'cython-mode nil 'no-error)
    (add-to-list 'auto-mode-alist '("\\.pyx\\'" . cython-mode))
    (add-to-list 'auto-mode-alist '("\\.pxd\\'" . cython-mode))
    (add-to-list 'auto-mode-alist '("\\.pxi\\'" . cython-mode)))
#+end_src

#+source: message-line
#+begin_src emacs-lisp
  (message "Starter Kit Python loaded.")
#+end_src
